/**
* This code was generated by v0 by Vercel.
* @see https://v0.dev/t/WJxvFF2s9Nj
* Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
*/

/** Add fonts into your Next.js project:

import { Rethink_Sans } from 'next/font/google'
import { DM_Sans } from 'next/font/google'

rethink_sans({
  subsets: ['latin'],
  display: 'swap',
})

dm_sans({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
"use client"

import { useState } from "react"
import { Input } from "@/components/ui/input"
import { Table, TableHeader, TableRow, TableHead, TableBody, TableCell } from "@/components/ui/table"

export function Dashboard() {
  const [feedbackData, setFeedbackData] = useState([
    {
      id: 1,
      name: "John Doe",
      email: "john@example.com",
      message: "Great product, keep up the good work!",
      submitted: "2023-05-01 10:30 AM",
    },
    {
      id: 2,
      name: "Jane Smith",
      email: "jane@example.com",
      message: "I have a suggestion for a new feature...",
      submitted: "2023-05-02 3:15 PM",
    },
    {
      id: 3,
      name: "Bob Johnson",
      email: "bob@example.com",
      message: "I encountered a bug, please look into it.",
      submitted: "2023-05-03 9:00 AM",
    },
    {
      id: 4,
      name: "Sarah Lee",
      email: "sarah@example.com",
      message: "Your customer service is excellent!",
      submitted: "2023-05-04 2:45 PM",
    },
    {
      id: 5,
      name: "Tom Wilson",
      email: "tom@example.com",
      message: "I have a question about your pricing...",
      submitted: "2023-05-05 11:20 AM",
    },
  ])
  const [contactData, setContactData] = useState([
    {
      id: 1,
      name: "John Doe",
      email: "john@example.com",
      message: "I would like to discuss a partnership opportunity.",
      submitted: "2023-05-01 2:00 PM",
    },
    {
      id: 2,
      name: "Jane Smith",
      email: "jane@example.com",
      message: "I have a question about your services.",
      submitted: "2023-05-02 9:30 AM",
    },
    {
      id: 3,
      name: "Bob Johnson",
      email: "bob@example.com",
      message: "I would like to schedule a demo.",
      submitted: "2023-05-03 4:45 PM",
    },
    {
      id: 4,
      name: "Sarah Lee",
      email: "sarah@example.com",
      message: "I have a complaint about your product.",
      submitted: "2023-05-04 11:15 AM",
    },
    {
      id: 5,
      name: "Tom Wilson",
      email: "tom@example.com",
      message: "I would like to become a reseller.",
      submitted: "2023-05-05 3:30 PM",
    },
  ])
  const [searchTerm, setSearchTerm] = useState("")
  const filteredFeedbackData = feedbackData.filter((item) =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.message.toLowerCase().includes(searchTerm.toLowerCase()))
  const filteredContactData = contactData.filter((item) =>
    item.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.email.toLowerCase().includes(searchTerm.toLowerCase()) ||
    item.message.toLowerCase().includes(searchTerm.toLowerCase()))
  return (
    (<div className="flex flex-col h-full">
      <header className="bg-background px-6 py-4 border-b">
        <h1 className="text-2xl font-bold">Customer Feedback & Contact</h1>
      </header>
      <div className="flex-1 p-6 grid grid-cols-1 md:grid-cols-2 gap-6">
        <div className="bg-background rounded-lg shadow-md">
          <div className="px-6 py-4 border-b">
            <h2 className="text-xl font-bold">Customer Feedback</h2>
            <div className="relative mt-4">
              <div
                className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <div className="h-5 w-5 text-muted-foreground" />
              </div>
              <Input
                type="text"
                placeholder="Search feedback..."
                className="pl-10 w-full"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)} />
            </div>
          </div>
          <div className="overflow-auto max-h-[400px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>Feedback</TableHead>
                  <TableHead>Submitted</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredFeedbackData.map((item) => (
                  <TableRow key={item.id}>
                    <TableCell>{item.name}</TableCell>
                    <TableCell>{item.email}</TableCell>
                    <TableCell>{item.message}</TableCell>
                    <TableCell>{item.submitted}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
        <div className="bg-background rounded-lg shadow-md">
          <div className="px-6 py-4 border-b">
            <h2 className="text-xl font-bold">Contact Form Submissions</h2>
            <div className="relative mt-4">
              <div
                className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <div className="h-5 w-5 text-muted-foreground" />
              </div>
              <Input
                type="text"
                placeholder="Search contact form..."
                className="pl-10 w-full"
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)} />
            </div>
          </div>
          <div className="overflow-auto max-h-[400px]">
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Name</TableHead>
                  <TableHead>Email</TableHead>
                  <TableHead>Message</TableHead>
                  <TableHead>Submitted</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {filteredContactData.map((item) => (
                  <TableRow key={item.id}>
                    <TableCell>{item.name}</TableCell>
                    <TableCell>{item.email}</TableCell>
                    <TableCell>{item.message}</TableCell>
                    <TableCell>{item.submitted}</TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
      </div>
    </div>)
  );
}
